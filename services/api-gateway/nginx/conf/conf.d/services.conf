# Service routing configuration
server {
    listen 80;
    listen [::]:80;
    server_name api.yourdomain.com;
    
    # Access log with conditional audit logging
    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/audit_events.log kafka_json if=$audit_logging;
    
    # Include proxy parameters
    include /etc/nginx/proxy_params;
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","version":"1.0.0"}';
        default_type application/json;
    }
    
    # Define upstream servers
    upstream user_service {
        server user-service:8083;
        keepalive 32;
    }
    
    upstream strategy_service {
        server strategy-service:8082;
        keepalive 32;
    }
    
    upstream historical_service {
        server historical-service:8081;
        keepalive 32;
    }
    
    upstream media_service {
        server media-service:8085;
        keepalive 32;
    }
    
    upstream backtest_service {
        server backtest-service:5000;
        keepalive 32;
    }
    
    # Route for user service - PUBLIC AUTH ENDPOINTS
    location ~ ^/api/v1/auth/(login|register|refresh-token) {
        # Rate limiting for login/register to prevent brute force
        limit_req zone=login_limit burst=3 nodelay;
        
        proxy_pass http://user_service;
        
        # Don't cache authentication requests
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }
    
    # Route for user service - PROTECTED AUTH ENDPOINTS
    location ~ ^/api/v1/auth/(logout|logout-all|validate) {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://user_service;
        
        # Don't cache authentication requests
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }
    
    # User routes - all protected
    location ~ ^/api/v1/users/ {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Add user information to headers for upstream service
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://user_service;
        
        # Rate limiting
        limit_req zone=api_limit burst=5 nodelay;
    }
    
    # Admin routes - protected with role check
    location ~ ^/api/v1/admin/ {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Check if user has admin role
        if ($user_role != "admin") {
            return 403 '{"error":"Insufficient permissions"}';
        }
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://user_service;
        
        # Specific rate limit for admin operations
        limit_req zone=admin_limit burst=5 nodelay;
    }
    
    # Strategy service routes - authenticated
    location ~ ^/api/v1/(strategies|indicators|parameters|enum-values|strategy-tags) {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Rate limiting
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://strategy_service;
        
        # Cache GET requests for read-heavy endpoints
        proxy_cache api_cache;
        proxy_cache_methods GET;
        proxy_cache_valid 200 1m;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Historical service routes - authenticated
    location ~ ^/api/v1/(market-data|backtests|backtest-runs|symbols|timeframes) {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://historical_service;
        
        # Increase timeouts for long-running backtest operations
        proxy_read_timeout 120s;
    }
    
    # Media service - complex path handling
    location ~ ^/media/(.*) {
        set $path $1;
        
        # Handle direct file access
        if ($path ~* "\.(jpg|jpeg|png|gif|webp)$") {
            # Add cache headers for images
            expires 1y;
            add_header Cache-Control "public, max-age=31536000";
            
            # Cache in Nginx
            proxy_cache media_cache;
            proxy_cache_valid 200 7d;
            
            proxy_pass http://media_service/api/v1/media/by-path/$path;
            break;
        }
        
        # Handle other media paths
        if ($path !~* "\.(jpg|jpeg|png|gif|webp)$") {
            proxy_pass http://media_service/api/v1/media/$path;
            break;
        }
    }
    
    # Media service API routes - some require auth
    location ~ ^/api/v1/media/upload {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        # Increase request size limits for file uploads
        client_max_body_size 10M;
        
        # Specific rate limit for media uploads
        limit_req zone=media_limit burst=5 nodelay;
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://media_service;
    }
    
    # Public media access route
    location ~ ^/api/v1/media/by-path {
        proxy_pass http://media_service;
        proxy_cache media_cache;
        proxy_cache_valid 200 7d;
        add_header X-Cache-Status $upstream_cache_status;
        expires 7d;
    }
    
    # Backtest service - authenticated
    location ~ ^/api/v1/backtest {
        auth_request /auth;
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $user_role $upstream_http_x_user_role;
        
        proxy_set_header X-User-ID $user_id;
        proxy_set_header X-User-Role $user_role;
        proxy_pass http://backtest_service;
        
        # Increased timeouts for long-running backtest operations
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }
    
    # CORS Configuration
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # Default 404 handler
    location / {
        return 404 '{"error":"API endpoint not found"}';
    }
}